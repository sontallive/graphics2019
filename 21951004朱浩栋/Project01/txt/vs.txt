struct TRANS{
    mat4 trans[10];
    int isTrans[10];
};
struct LIGHT{
    int    isLight[20];
    vec3   lightPos[20];
    vec3   lightColor[20];
};
uniform mat4   _view;
uniform mat4   _proj;
uniform TRANS  _trans;
uniform LIGHT  _light;
uniform vec3   _camera;
uniform float  _metallic;//金属程度：0-1（是金属）
uniform float  _roughness;//粗糙度：0-1（粗糙）
//uniform float  _ao;//环境光
in      vec3   _position;
in      vec3   _normal;
in      vec3   _color;
out     varying    vec3   _outColor;

const float PI = 3.14159265359;

vec3   _n = _normal;
vec3   _p = _position;


vec3 fresnelSchlick(float cosTheta, vec3 F0)
{
    return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);
}

float DistributionGGX(vec3 N, vec3 H, float roughness)
{
    float a      = roughness*roughness;
    float a2     = a*a;
    float NdotH  = max(dot(N, H), 0.0);
    float NdotH2 = NdotH*NdotH;

    float nom   = a2;
    float denom = (NdotH2 * (a2 - 1.0) + 1.0);
    denom = PI * denom * denom;

    return nom / denom;
}

float GeometrySchlickGGX(float NdotV, float roughness)
{
    float r = (roughness + 1.0);
    float k = (r*r) / 8.0;

    float nom   = NdotV;
    float denom = NdotV * (1.0 - k) + k;

    return nom / denom;
}

float GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness)
{
    float NdotV = max(dot(N, V), 0.0);
    float NdotL = max(dot(N, L), 0.0);
    float ggx2  = GeometrySchlickGGX(NdotV, roughness);
    float ggx1  = GeometrySchlickGGX(NdotL, roughness);

    return ggx1 * ggx2;
}

void main(){
    vec3 eyeDir;
    vec4 tmp,tmp2;
    vec3 lightDir;



    //calc trans
        tmp2 = vec4(_p,1.0);
        tmp = vec4(_n,0.0);
        for(int i=0;i<10;i++){
            if(_trans.isTrans[i]==1){
                tmp2 = tmp2 * _trans.trans[i];
                tmp = tmp * _trans.trans[i];
            }
            else if(_trans.isTrans[i]==2){
                tmp2 = (_trans.trans[i])[0] + tmp2;
            }
        }
        _n = tmp.xyz;
        _p = tmp2.xyz;
        tmp2 = _proj * _view * tmp2;
        gl_Position = tmp2;

    //pbr
    _n = normalize(_n);
    eyeDir = normalize(_camera - _p);
    vec3 Lo = vec3(0.0);//最终结果
    for(int i=0; i<20; ++i){
        if(_light.isLight[i] != 0){
            lightDir = normalize(_light.lightPos[i] - _p);
            vec3 H = normalize(lightDir + eyeDir);
            //距离衰减
            float distance = length(_light.lightPos[i] - _p);
            float attenuation = 1.0 / (distance * distance);
            vec3 radiance = _light.lightColor[i] * attenuation;
            //F
            vec3 F0 = vec3(0.04);
            F0 = mix(F0, _color, _metallic);
            vec3 F = fresnelSchlick(max(dot(H, eyeDir), 0.0), F0);
            //NDF
            float NDF = DistributionGGX(_n, H, _roughness);
            //G
            float G   = GeometrySmith(_n, eyeDir, lightDir, _roughness);
            //DFG/4()()
            vec3 nominator    = NDF * G * F;
            float denominator = 4.0 * max(dot(_n, eyeDir), 0.0) * max(dot(_n, lightDir), 0.0) + 0.001;
            vec3 specular     = nominator / denominator;
            //ks, kd
            vec3 kS = F;
            vec3 kD = vec3(1.0) - kS;
            kD *= 1.0 - _metallic;
            //入射衰减
            float NdotL = max(dot(_n, lightDir), 0.0);
            //最终和
            Lo += (kD * _color / PI + specular) * radiance * NdotL;
        }
    }
    vec3 ambient = vec3(0.03) * _color * 1;
    vec3 color   = (ambient + Lo);
    color = color / (color + vec3(1.0));
    color = pow(color, vec3(1.0/2.2));
    _outColor = color;
















    //vec4 tmp2;
    //vec3 tmp;
    //float light;
    //calc reflect
    //tmp[0] = 2.0*((_normal[1]*_normal[1]+_normal[2]*_normal[2])*_lightDir[0]-(_normal[1]*_lightDir[1]+_normal[2]*_lightDir[2])*_normal[0])/(_normal[0]*_normal[0]+_normal[1]*_normal[1]+_normal[2]*_normal[2]);
    //tmp[1] = 2.0*((_normal[0]*_normal[0]+_normal[2]*_normal[2])*_lightDir[1]-(_normal[0]*_lightDir[0]+_normal[2]*_lightDir[2])*_normal[1])/(_normal[0]*_normal[0]+_normal[1]*_normal[1]+_normal[2]*_normal[2]);
    //tmp[2] = 2.0*((_normal[0]*_normal[0]+_normal[1]*_normal[1])*_lightDir[2]-(_normal[0]*_lightDir[0]+_normal[1]*_lightDir[1])*_normal[2])/(_normal[0]*_normal[0]+_normal[1]*_normal[1]+_normal[2]*_normal[2]);
    //tmp = tmp - _lightDir;
    //light = max(dot(tmp,eyeDir),0.1);

    //_outColor = light*_color;


    //if(_color[0]==1){
    //    _outColor = light*vec3(1,0,0);
    //}
    //else if(_color[1]==1){
    //    _outColor = light*vec3(0,1,0);
    //}
    //else if(_color[2]==1){
    //    _outColor = light*vec3(0,0,1);
    //}
    //else{
    //    _outColor = light*vec3(1,1,1);
    //}
}